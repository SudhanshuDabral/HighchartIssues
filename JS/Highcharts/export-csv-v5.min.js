!function (t) { "object" == typeof module && module.exports ? module.exports = t : t(Highcharts) }(function (t) { "use strict"; function e(e, o, n, a, r) { var s, l, c, p = (e.options.exporting || {}).csv || {}, x = p.url || "http://www.highcharts.com/studies/csv-export/download.php"; c = e.options.exporting.filename ? e.options.exporting.filename : e.title ? e.title.textStr.replace(/ /g, "-").toLowerCase() : "chart", window.Blob && window.navigator.msSaveOrOpenBlob ? (l = new Blob([a]), window.navigator.msSaveOrOpenBlob(l, c + "." + n)) : i ? (s = document.createElement("a"), s.href = o, s.target = "_blank", s.download = c + "." + n, e.container.append(s), s.click(), s.remove()) : t.post(x, { data: a, type: r, extension: n }) } var o = t.each, n = t.pick, a = t.seriesTypes, i = void 0 !== document.createElement("a").download; t.setOptions({ lang: { downloadCSV: "Download CSV", downloadXLS: "Download XLS" } }), t.Chart.prototype.getDataRows = function () { var e, a, i, r, s, l = (this.options.exporting || {}).csv || {}, c = this.xAxis, p = {}, x = [], m = [], d = l.dateFormat || "%Y-%m-%d %H:%M:%S", h = l.columnHeaderFormatter || function (e, o, n) { return e instanceof t.Axis ? e.options.title && e.options.title.text || (e.isDatetimeAxis ? "DateTime" : "Category") : e ? e.name + (n > 1 ? " (" + o + ")" : "") : "Category" }, u = []; i = 0, o(this.series, function (e) { var a, r = e.options.keys, s = r || e.pointArrayMap || ["y"], l = s.length, x = !0, d = {}, f = t.inArray(e.xAxis, c); if (o(s, function (t) { d[t] = e[t + "Axis"] && e[t + "Axis"].categories || [] }), e.options.includeInCSVExport !== !1 && e.visible !== !1) { for (t.find(u, function (t) { return t[0] === f }) || u.push([f, i]), a = 0; l > a;)m.push(h(e, s[a], s.length)), a += 1; o(e.options.data, function (t, o) { var r, c, m = n(t.x, t[0], o), h = n(t.y, t[1]), u = n(t.x, t[2]), g = [h, u], b = x ? m : o + 1; for (a = 0, p[b] || (p[b] = [], p[b].xValues = []), p[b].x = m, p[b].xValues[f] = m, e.xAxis && "name" !== e.exportKey || (p[b].name = t.name); l > a;)r = s[a], c = t[r], p[b][i + a] = n(d[r][c], g[a], h), a += 1 }), i += a } }); for (r in p) p.hasOwnProperty(r) && x.push(p[r]); var f, g; for (a = [m], i = u.length; i--;)f = u[i][0], g = u[i][1], e = c[f], x.sort(function (t, e) { return t.xValues[f] - e.xValues[f] }), s = h(e), a[0].splice(g, 0, s), o(x, function (o) { var a = o.name; a || (e && e.isDatetimeAxis ? (o.x instanceof Date && (o.x = o.x.getTime()), a = t.dateFormat(d, o.x)) : a = e && e.categories ? n(e.names[o.x], e.categories[o.x], o.x) : o.x), o.splice(g, 0, a) }); return a = a.concat(x) }, t.Chart.prototype.getCSV = function (t) { var e = "", n = this.getDataRows(), a = (this.options.exporting || {}).csv || {}, i = a.itemDelimiter || ",", r = a.lineDelimiter || "\n"; return o(n, function (o, a) { for (var s = "", l = o.length, c = t ? 1.1.toLocaleString()[1] : "."; l--;)s = o[l], "string" == typeof s && (s = '"' + s + '"'), "number" == typeof s && "," === c && (s = s.toString().replace(".", ",")), o[l] = s; e += o.join(i), a < n.length - 1 && (e += r) }), e }, t.Chart.prototype.getTable = function (t) { var e = "<table><thead>", n = this.getDataRows(); return o(n, function (o, n) { var a, i, r = n ? "td" : "th", s = t ? 1.1.toLocaleString()[1] : "."; for (e += "<tr>", i = 0; i < o.length; i += 1)a = o[i], "number" == typeof a ? (a = a.toString(), "," === s && (a = a.replace(".", s)), e += "<" + r + ' class="number">' + a + "</" + r + ">") : e += "<" + r + ">" + (void 0 === a ? "" : a) + "</" + r + ">"; e += "</tr>", n || (e += "</thead><tbody>") }), e += "</tbody></table>" }, t.Chart.prototype.downloadCSV = function () { var t = this.getCSV(!0); e(this, "data:text/csv,\ufeff" + encodeURIComponent(t), "csv", t, "text/csv") }, t.Chart.prototype.downloadXLS = function () { var t = "data:application/vnd.ms-excel;base64,", o = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>Ark1</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>td{border:none;font-family: Calibri, sans-serif;} .number{mso-number-format:"0.00";}</style><meta name=ProgId content=Excel.Sheet><meta charset=UTF-8></head><body>' + this.getTable(!0) + "</body></html>", n = function (t) { return window.btoa(unescape(encodeURIComponent(t))) }; e(this, t + n(o), "xls", o, "application/vnd.ms-excel") }, t.Chart.prototype.viewData = function () { this.dataTableDiv || (this.dataTableDiv = document.createElement("div"), this.dataTableDiv.className = "highcharts-data-table", this.renderTo.parentNode.insertBefore(this.dataTableDiv, this.renderTo.nextSibling)), this.dataTableDiv.innerHTML = this.getTable() }, t.getOptions().exporting && t.getOptions().exporting.buttons.contextButton.menuItems.push({ textKey: "downloadCSV", onclick: function () { this.downloadCSV() } }, { textKey: "downloadXLS", onclick: function () { this.downloadXLS() } }), a.map && (a.map.prototype.exportKey = "name"), a.mapbubble && (a.mapbubble.prototype.exportKey = "name"), a.treemap && (a.treemap.prototype.exportKey = "name") });