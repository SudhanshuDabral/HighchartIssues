!function (e) { "use strict"; function t(t, i) { var s = this, l = t.attr("name") || i.name || "", o = t.parent().attr("style") || ""; t.parent().hide(); var n = t.css("width"); t.parent().show().attr("style", o), "0px" == n && (n = t.outerWidth() + 20), this.$el = t.hide(), this.options = i, this.$parent = e("<div" + e.map(["class", "title"], function (e) { var t = s.$el.attr(e) || ""; return t = ("class" === e ? "ms-parent" + (t ? " " : "") : "") + t, t ? " " + e + '="' + t + '"' : "" }).join("") + " />"), this.$choice = e('<button type="button" class="ms-choice"><span class="placeholder" placeholder="Select Well List">' + i.placeholder + "</span><div></div></button>"), this.$drop = e('<div class="ms-drop ' + i.position + '"></div>'), this.$el.after(this.$parent), this.$parent.append(this.$choice), this.$parent.append(this.$drop), this.$el.prop("disabled") && this.$choice.addClass("disabled"), this.$parent.css("width", i.width || n), this.options.keepOpen || e("body").click(function (t) { e(t.target)[0] !== s.$choice[0] && e(t.target).parents(".ms-choice")[0] !== s.$choice[0] && (e(t.target)[0] !== s.$drop[0] && e(t.target).parents(".ms-drop")[0] === s.$drop[0] || !s.options.isOpen || s.close()) }), this.selectAllName = 'name="selectAll' + l + '"', this.selectGroupName = 'name="selectGroup' + l + '"', this.selectItemName = 'name="selectItem' + l + '"' } t.prototype = { constructor: t, init: function () { var t = this; this.options.filter && this.$drop.append('<div class="ms-search">', '<input type="text" autocomplete="off" autocorrect="off" autocapitilize="off" spellcheck="false">', "</div>"); var i = e("<ul></ul>"); e.each(this.$el.children(), function (e, s) { i.append(t.optionToHtml(e, s)) }), i.append('<li class="ms-no-results">' + this.options.noMatchesFound + "</li>"), this.$drop.append(i), this.$drop.find(".multiple").css("width", this.options.multipleWidth + "px"), this.$searchInput = this.$drop.find(".ms-search input"), this.$selectAll = this.$drop.find("input[" + this.selectAllName + "]"), this.$selectGroups = this.$drop.find("input[" + this.selectGroupName + "]"), this.$selectItems = this.$drop.find("input[" + this.selectItemName + "]:enabled"), this.$disableItems = this.$drop.find("input[" + this.selectItemName + "]:disabled"), this.$noResults = this.$drop.find(".ms-no-results"), this.events(), this.updateSelectAll(!0), this.update(!0), this.options.isOpen && this.open() }, optionToHtml: function (t, i, s, l) { var o, n = this, c = e(i), h = this.options.multiple, a = ["class", "title"], p = e.map(a, function (e) { var t = "class" === e && h, i = c.attr(e) || ""; return t || i ? " " + e + '="' + (t ? "multiple" + (i ? " " : "") : "") + i + '"' : "" }).join(""), r = this.options.single ? "radio" : "checkbox"; if (c.is("option")) { var d = c.val(), u = n.options.textTemplate(c), f = c.prop("selected"), m = this.options.styler(d) ? ' style="' + this.options.styler(d) + '"' : ""; if (o = l || c.prop("disabled"), this.options.blockSeparator > "" && this.options.blockSeparator == c.val()) { var $ = e("<li" + p + m + ">", '<label class="' + this.options.blockSeparator + (o ? "disabled" : "") + '">', "</label>", "</li>"); return $.find("label").append(document.createTextNode(u)), $ } var $ = e("<li" + p + m + "><label" + (o ? ' class="disabled"' : "") + '><input type="' + r + '" ' + this.selectItemName + (f ? ' checked="checked"' : "") + (o ? ' disabled="disabled"' : "") + (s ? ' data-group="' + s + '"' : "") + "/> </label></li>"); return $.find("input").val(d), $.find("label").append(document.createTextNode(u)), $ } if (!s && c.is("optgroup")) { var k = "group_" + t, v = c.attr("label"); o = c.prop("disabled"); var s = e("<div/>"); return s.append('<li class="group"><label class="optgroup' + (o ? " disabled" : "") + '" data-group="' + k + '">' + (this.options.hideOptgroupCheckboxes ? "" : '<input type="checkbox" ' + this.selectGroupName + (o ? ' disabled="disabled"' : "") + " /> ") + v + "</label></li>"), $.find("label").append(document.createTextNode(u)), e.each(c.children(), function (e, t) { s.append(n.optionToHtml(e, t, k, o)) }), s.html() } }, events: function () { function t(e) { e.preventDefault(), i[i.options.isOpen ? "close" : "open"]() } var i = this, s = this.$el.parent().closest("label")[0] || e("label[for=" + this.$el.attr("id").split(":").join("\\:") + "]")[0]; s && e(s).off("click").on("click", function (e) { "label" === e.target.nodeName.toLowerCase() && e.target === this && (t(e), i.options.filter && i.options.isOpen || i.focus(), e.stopPropagation()) }), this.$choice.off("click").on("click", t).off("focus").on("focus", this.options.onFocus).off("blur").on("blur", this.options.onBlur), this.$parent.off("keydown").on("keydown", function (e) { switch (e.which) { case 27: i.close(), i.$choice.focus() } }), this.$searchInput.off("keydown").on("keydown", function (e) { 9 === e.keyCode && e.shiftKey && i.close() }).off("keyup").on("keyup", function (e) { return i.options.filterAcceptOnEnter && (13 === e.which || 32 == e.which) && i.$searchInput.val() ? (i.$selectAll.click(), i.close(), void i.focus()) : void i.filter() }), this.$selectAll.off("click").on("click", function () { GlobalSelectedWell = []; var t = e(this).prop("checked"), s = i.$selectItems.filter(":visible"); s.length === i.$selectItems.length ? (t && e.each(s, function (e, t) { GlobalSelectedWell.push(t.value) }), i[t ? "checkAll" : "uncheckAll"]()) : (i.$selectGroups.prop("checked", t), s.prop("checked", t), i.options[t ? "onCheckAll" : "onUncheckAll"](), i.update()) }), this.$selectGroups.off("click").on("click", function () { var t = e(this).parent().attr("data-group"), s = i.$selectItems.filter(":visible"), l = s.filter('[data-group="' + t + '"]'), o = l.length !== l.filter(":checked").length; l.prop("checked", o), i.updateSelectAll(), i.update(), i.options.onOptgroupClick({ label: e(this).parent().text(), checked: o, children: l.get() }) }), this.$selectItems.off("click").on("click", function () { i.updateSelectAll(), this.checked ? i.update() : this.checked || i.update(), i.updateOptGroupSelect(), i.options.onClick({ label: e(this).parent().text(), value: e(this).val(), checked: e(this).prop("checked") }), showLoader(); var t = this.value; -1 != this.name.indexOf("GroupAnalysis") ? this.checked ? setTimeout(function () { BindAdditionalGroupData(t, !0, ActiveTab), hideLoader() }, 250) : setTimeout(function () { BindAdditionalGroupData(t, !1, ActiveTab), hideLoader() }, 250) : "selectItemDCAAnalysis" != this.name ? this.checked ? setTimeout(function () { BindAdditionalWellPhaseRate(t, !0), hideLoader() }, 250) : setTimeout(function () { BindAdditionalWellPhaseRate(t, !1), hideLoader() }, 250) : this.checked ? setTimeout(function () { BindAnalysisForAllPhase(t, !0), hideLoader() }, 250) : setTimeout(function () { BindAnalysisForAllPhase(t, !1), hideLoader() }, 250), i.options.single && i.options.isOpen && !i.options.keepOpen && i.close() }) }, open: function () { if (!this.$choice.hasClass("disabled")) { if (this.options.isOpen = !0, this.$choice.find(">div").addClass("open"), this.$drop.show(), this.$selectAll.parent().show(), this.$noResults.hide(), 0 === this.$el.children().length && (this.$selectAll.parent().hide(), this.$noResults.show()), this.options.container) { var t = this.$drop.offset(); this.$drop.appendTo(e(this.options.container)), this.$drop.offset({ top: t.top, left: t.left }) } this.options.filter && (this.$searchInput.val(""), this.$searchInput.focus(), this.filter()), this.options.onOpen() } }, close: function () { this.options.isOpen = !1, this.$choice.find(">div").removeClass("open"), this.$drop.hide(), this.options.container && (this.$parent.append(this.$drop), this.$drop.css({ top: "auto", left: "auto" })), this.options.onClose() }, update: function (t) { var i = this.getSelects(), s = this.$choice.find(">span"); 0 === i.length ? s.addClass("placeholder").html(this.options.placeholder) : this.options.countSelected && i.length < this.options.minimumCountSelected ? s.removeClass("placeholder").text((this.options.displayValues ? i : this.getSelects("text")).join(this.options.delimiter)) : this.options.allSelected && i.length === this.$selectItems.length + this.$disableItems.length ? s.removeClass("placeholder").html(this.options.allSelected) : (this.options.countSelected || this.options.etcaetera) && i.length > this.options.minimumCountSelected ? this.options.etcaetera ? s.removeClass("placeholder").text((this.options.displayValues ? i : this.getSelects("text").slice(0, this.options.minimumCountSelected)).join(this.options.delimiter) + "...") : s.removeClass("placeholder").html(this.options.countSelected.replace("#", i.length).replace("%", this.$selectItems.length + this.$disableItems.length)) : s.removeClass("placeholder").text((this.options.displayValues ? i : this.getSelects("text")).join(this.options.delimiter)), this.options.addTitle && s.prop("title", this.getSelects("text")), this.$el.val(this.getSelects()), this.$drop.find("li").removeClass("selected"), this.$drop.find("input[" + this.selectItemName + "]:checked").each(function () { e(this).parents("li").first().addClass("selected") }), t || this.$el.trigger("change") }, updateSelectAll: function (e) { var t = this.$selectItems; e || (t = t.filter(":visible")), this.$selectAll.prop("checked", t.length && t.length === t.filter(":checked").length), this.$selectAll.prop("checked") && this.options.onCheckAll() }, updateOptGroupSelect: function () { var t = this.$selectItems.filter(":visible"); e.each(this.$selectGroups, function (i, s) { var l = e(s).parent().attr("data-group"), o = t.filter('[data-group="' + l + '"]'); e(s).prop("checked", o.length && o.length === o.filter(":checked").length) }) }, getSelects: function (t) { var i = this, s = [], l = []; return this.$drop.find("input[" + this.selectItemName + "]:checked").each(function () { s.push(e(this).parents("li").first().text()), l.push(e(this).val()) }), "text" === t && this.$selectGroups.length && (s = [], this.$selectGroups.each(function () { var t = [], l = e.trim(e(this).parent().text()), o = e(this).parent().data("group"), n = i.$drop.find("[" + i.selectItemName + '][data-group="' + o + '"]'), c = n.filter(":checked"); if (0 !== c.length) { if (t.push("["), t.push(l), n.length > c.length) { var h = []; c.each(function () { h.push(e(this).parent().text()) }), t.push(": " + h.join(", ")) } t.push("]"), s.push(t.join("")) } })), "text" === t ? s : l }, setSelects: function (t) { var i = this; this.$selectItems.prop("checked", !1), e.each(t, function (e, t) { i.$selectItems.filter('[value="' + t + '"]').prop("checked", !0) }), this.$selectAll.prop("checked", this.$selectItems.length === this.$selectItems.filter(":checked").length), this.update() }, enable: function () { this.$choice.removeClass("disabled") }, disable: function () { this.$choice.addClass("disabled") }, checkAll: function () { this.$selectItems.prop("checked", !0), this.$selectGroups.prop("checked", !0), this.$selectAll.prop("checked", !0), this.update(), this.options.onCheckAll() }, uncheckAll: function () { this.$selectItems.prop("checked", !1), this.$selectGroups.prop("checked", !1), this.$selectAll.prop("checked", !1), this.update(), this.options.onUncheckAll() }, focus: function () { this.$choice.focus(), this.options.onFocus() }, blur: function () { this.$choice.blur(), this.options.onBlur() }, refresh: function () { this.init() }, filter: function () { var t = this, i = e.trim(this.$searchInput.val()).toLowerCase(); 0 === i.length ? (this.$selectItems.parent().show(), this.$disableItems.parent().show(), this.$selectGroups.parent().show()) : (this.$selectItems.each(function () { var t = e(this).parent(); t[t.text().toLowerCase().indexOf(i) < 0 ? "hide" : "show"]() }), this.$disableItems.parent().hide(), this.$selectGroups.each(function () { var i = e(this).parent(), s = i.attr("data-group"), l = t.$selectItems.filter(":visible"); i[0 === l.filter('[data-group="' + s + '"]').length ? "hide" : "show"]() }), this.$selectItems.filter(":visible").length ? (this.$selectAll.parent().show(), this.$noResults.hide()) : (this.$selectAll.parent().hide(), this.$noResults.show())), this.updateOptGroupSelect(), this.updateSelectAll() } }, e.fn.multipleSelect = function () { var i, s = arguments[0], l = arguments, o = ["getSelects", "setSelects", "enable", "disable", "checkAll", "uncheckAll", "focus", "blur", "refresh", "close"]; return this.each(function () { var n = e(this), c = n.data("multipleSelect"), h = e.extend({}, e.fn.multipleSelect.defaults, n.data(), "object" == typeof s && s); if (c || (c = new t(n, h), n.data("multipleSelect", c)), "string" == typeof s) { if (e.inArray(s, o) < 0) throw "Unknown method: " + s; i = c[s](l[1]) } else c.init(), l[1] && (i = c[l[1]].apply(c, [].slice.call(l, 2))) }), i ? i : this }, e.fn.multipleSelect.defaults = { name: "", isOpen: !1, placeholder: "Reference Wells", selectAll: !0, selectAllText: "Select all", selectAllDelimiter: ["[", "]"], allSelected: "All selected", minimumCountSelected: 1, countSelected: "# of % selected", noMatchesFound: "No matches found", multiple: !1, multipleWidth: 80, single: !1, filter: !1, width: void 0, maxHeight: 250, container: null, position: "bottom", keepOpen: !1, blockSeparator: "", displayValues: !1, delimiter: ", ", addTitle: !1, styler: function () { return !1 }, textTemplate: function (e) { return e.text() }, onOpen: function () { return !1 }, onClose: function () { return !1 }, onCheckAll: function () { return !1 }, onUncheckAll: function () { return !1 }, onFocus: function () { return !1 }, onBlur: function () { return !1 }, onOptgroupClick: function () { return !1 }, onClick: function () { return !1 } } }(jQuery);